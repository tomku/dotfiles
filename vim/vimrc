" Core vimrc file
" vim: tw=78 fdl=0 fdm=marker
"
" Intro. {{{1
"
" This file contains all of my non-GUI settings for vim. As is the nature of
" config files, many parts of this were cobbled together from various blog
" posts, Github repositories and digging around in the Vim docs. Most of the
" substantial functions (as well as many of the less obvious tweaks) came from
" Amir Salihefendic's vimrc, available at:
"
"   http://amix.dk/blog/post/19486#The-ultimate-vim-configuration-vimrc
"
" Many thanks to him for the well-commented examples.
"
" Clean initialization. {{{1
autocmd!

" Load some sensible defaults from the example vimrc.
if filereadable("$VIM\_vimrc")
    source $VIM\_vimrc
elseif filereadable("$VIM/vimrc")
    source $VIM/vimrc
endif

" Normalize the home directory, since GVim on Windows can start up in some
" very useless places.
if (getcwd() == $VIMRUNTIME) || (getcwd() == "C:\\WINDOWS\\system32")
    cd $HOME
endif

" Leader mappings. {{{1
" Need to set this early, because leader mappings use the value of <leader> at
" the time they're defined.
let g:mapleader = "\<Space>"
let g:maplocalleader = "\\"

" Vundle initialization. {{{1
" Vundle requires this in order to load properly.
filetype off

" Load Vundle.
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle "gmarik/vundle"

" Plugins. {{{1

" Matchit.vim is included with vim.
runtime macros/matchit.vim

" General support libraries. {{{2
Bundle 'kana/vim-textobj-user'
Bundle 'MarcWeber/vim-addon-mw-utils'
Bundle 'mattn/webapi-vim'
Bundle 'tomtom/tlib_vim'
Bundle 'tpope/vim-repeat'
Bundle 'xolox/vim-misc'

" Color schemes. {{{2
Bundle 'altercation/vim-colors-solarized'
Bundle 'jnurmine/Zenburn'
Bundle 'nanotech/jellybeans.vim'
Bundle 'tpope/vim-vividchalk'
Bundle 'w0ng/vim-hybrid'

" Text objects. {{{2
Bundle 'argtextobj.vim'
Bundle 'bkad/CamelCaseMotion'
Bundle 'michaeljsmith/vim-indent-object'
Bundle 'nelstrom/vim-textobj-rubyblock'
Bundle 'paradigm/TextObjectify'

" Basic editing additions. {{{2
Bundle 'ervandew/supertab'
Bundle 'garbas/vim-snipmate'
Bundle 'godlygeek/tabular'
Bundle 'guns/vim-sexp'
Bundle 'kien/rainbow_parentheses.vim'
Bundle 'nathanaelkane/vim-indent-guides'
Bundle 'Raimondi/delimitMate'
Bundle 'scrooloose/syntastic'
Bundle 'snipmate-snippets'
Bundle 'tpope/vim-abolish'
Bundle 'tpope/vim-endwise'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-unimpaired'
Bundle 'YankRing.vim'

" Navigation and window management. {{{2
Bundle 'ack.vim'
Bundle 'kien/ctrlp.vim'
Bundle 'scrooloose/nerdtree'
Bundle 'Tagbar'
Bundle 'xolox/vim-session'
Bundle 'ZoomWin'

" General programming tools. {{{2
Bundle 'basepi/vim-conque'
Bundle 'dbext.vim'
" Powershell doesn't like this, and it probably doesn't work in cmd.exe.
if ( (has("win32") > 0) || (has("win64") > 0) ) && has("gui") == 0
    Bundle 'krisajenkins/vim-pipe'
endif
Bundle 'mattn/gist-vim'
Bundle 'tpope/vim-commentary'
Bundle 'tpope/vim-fugitive'

" Language-specific tools. {{{2
Bundle 'adimit/prolog.vim'
Bundle 'bitc/lushtags'
Bundle 'Blackrush/vim-gocode'
Bundle 'c.vim'
Bundle 'docunext/closetag.vim'
Bundle 'elehack/vim-oz'
Bundle 'jcf/vim-latex'
Bundle 'jelera/vim-javascript-syntax'
Bundle 'jimenezrick/vimerl'
Bundle 'JuliaLang/julia-vim'
Bundle 'klen/python-mode'
Bundle 'krisajenkins/vim-postgresql-syntax'
Bundle 'lukerandall/haskellmode-vim'
Bundle 'mattn/emmet-vim'
Bundle 'othree/javascript-libraries-syntax.vim'
Bundle 'Rykka/riv.vim'
Bundle 'scrooloose/nerdcommenter'
Bundle 'sheerun/vim-polyglot'
Bundle 'tpope/vim-bundler'
Bundle 'tpope/vim-fireplace'
Bundle 'tpope/vim-liquid'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-rake'
Bundle 'wlangstroth/vim-racket'
Bundle 'xhr/vim-io'

" Basic settings. {{{1
syntax enable
filetype indent plugin on

" Make sure modelines are read, Debian turns this off by default.
set modeline

" Solarized looks fine on real consoles, but terrible in cmd.exe.
set t_Co=16
set background=dark
if ( (has("win32") > 0) || (has("win64") > 0) ) && has("gui") == 0
    colorscheme desert
    hi CursorLine ctermbg=7
    hi CursorLineNr ctermfg=7
else
    colorscheme solarized
    hi CursorLineNr guibg=#073642 guifg=#586e75 ctermfg=NONE ctermbg=0
endif

" Default to UTF-8 and Unix line endings, but use the existing line endings
" if the file already has some.
set encoding=utf8
set ffs=unix,dos,mac
try
    lang en_US
catch
endtry

" Show partially-completed commands.
set showcmd

" Show a line highlighting where the cursor is.
set cursorline

" Enable hiding buffers without deleting them.
set hidden

" Allow backspacing over newlines, indentations.
set backspace=indent,eol,start

" Allow movement over newlines with the h and l keys.
set whichwrap+=h,l

" Use 4 space indentation, 8 spaces for existing tab characters, but never
" insert new tab characters.  Indentation commands should use shiftwidth and
" always round to the nearest 4 spaces.
set shiftwidth=4
set tabstop=8
set expandtab
set smarttab
set shiftround

" Preserve indentation when starting a new line.
set autoindent
set smartindent

" Tweak when comment characters are automatically inserted.
autocmd BufEnter * set formatoptions-=o

" Show trailing/unnecessary whitespace
set list
set listchars=tab:→\ ,trail:·

" Enable completion for command line commands.
set wildmenu
set wildmode=list:longest

" Dictionary file for dictionary completion.
set dictionary=~/Dropbox/dotfiles/mobywords-combined.txt

" Enable insert-mode completion.
set completeopt=menuone,longest,preview
set complete=.,w,b,u,t

" Enable fake word wrap, no actual wrapping is done to the file.
set linebreak
set wrap

" Enable relative line numbering, plus the current line number if vim is new
" enough to support it.
set relativenumber number

" Ignore case in regular expressions, unless they include upper case.
set ignorecase
set smartcase

" Enable incremental search and highlighting search matches.
set hlsearch
set incsearch

" Flash matching braces/brackets.
set showmatch
set matchtime=2

" Keep three lines of context at the top/bottom of the screen at all times.
set scrolloff=3

" Enable folding, but unfold everything by default.
set foldmethod=syntax
set foldlevelstart=99

" Set command line history to something saner than 20.
set history=1000

" Disable permanent backups, keep temporary backups during writes, disable
" swap files entirely.
set nobackup
set writebackup
set noswapfile

" Set up persistent undo. This is wrapped in a try/catch because it requires
" vim 7.3 or higher.
try
    set undodir=~/.vim/undo
    set undofile
catch
endtry

" Set window titles, and disable the audible bell.
set title
set visualbell

" Use the X11 clipboard when available, unless we're on a Linux virtual
" terminal or inside GNU screen.
set clipboard=autoselect,exclude:cons\\\|linux\\\|screen 

" Search for tags in the current working directory, then recursively upwards
" until /.
set tags=tags;/

" Disable IME by default.
set iminsert=0
set imsearch=-1
set noimcmdline

" Reuse open tabs and windows when switching buffers.
set switchbuf=usetab

" Create splits going towards the bottom right, not top left
set splitbelow
set splitright

" Mappings. {{{1
" Insert mode mappings. {{{2
" Easy way to get out of insert mode.
inoremap jk <esc>

" Normal mode mappings. {{{2
" Plugins.
nnoremap <leader>a :Ack! 

" Managing tabs.
noremap <leader>tt :tabnew<cr>
noremap <leader>te :tabedit
noremap <leader>tc :tabclose<cr>
noremap <leader>to :tabonly<cr>
noremap <leader>tn :tabnext<cr>
noremap <leader>tp :tabprevious<cr>
noremap <leader>tf :tabfirst<cr>
noremap <leader>tl :tablast<cr>
noremap <leader>tm :tabmove

" Quickfix window.
noremap <leader>co :botright cope<CR>
noremap <leader>j :cn<cr>
noremap <leader>k :cp<cr>

" Quick toggles.
nnoremap <leader>ss :setlocal spell!<cr>
nnoremap <leader>sp :set paste!<cr>
nnoremap <leader>sl :set list!<cr>

" Disable search highlight and redraw screen.
nnoremap <silent> <C-l> :<C-u>nohlsearch<CR><C-l>

" Line transposition.
nnoremap <M-j> mz:m+<cr>`z
nnoremap <M-k> mz:m-2<cr>`z

" Visual mode mappings. {{{2
vnoremap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vnoremap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

" Command line mode mappings. {{{2
" Command line snippets.
cnoremap $h edit ~/
cnoremap $d edit ~/Desktop/
cnoremap $j edit ./
cnoremap $c edit <C-\>eCurrentFileDir("edit")<cr>

func! CurrentFileDir(cmd)
  return a:cmd . " " . expand("%:p:h") . "/"
endfunc

" Heresy.
cnoremap <C-A> <Home>
cnoremap <C-E> <End>
cnoremap <C-K> <C-U>
cnoremap <C-P> <Up>
cnoremap <C-N> <Down>

" Write to root-owned file via sudo tee.
cnoremap w!! %!sudo tee > /dev/null %

" Training wheels. {{{2
map <up> <nop>
map <down> <nop>
map <right> <nop>
map <left> <nop>
inoremap <esc> <nop>

" Status line. {{{1
set laststatus=2
set cmdheight=2
set ruler
set statusline=%{HasPaste()}[%n]\ %<%F%m%h\ :%Y:\ %{exists('*fugitive#statusline')?fugitive#statusline():''}\ %w\ \ %h\ \ %=%b\ %B\ Line:\ %l/%L:%c\ [%P]

" Support functions for the status line. {{{2
function! CurDir()
    let curdir = substitute(getcwd(), $HOME, "~", "g")
    return curdir
endfunction

function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    else
        return ''
    endif
endfunction

" Automatic cleanup. {{{1
" Delete fugitive buffers when they aren't visible.
augroup fugitive
    autocmd!
    autocmd BufReadPost fugitive://* set bufhidden=delete
augroup END

augroup vundle
    autocmd!
    " Delete Vundle buffers when they aren't visible.
    autocmd FileType vundle set bufhidden=delete

    " Disable shellslash in Vundle buffers, or git command lines get screwed up.
    autocmd FileType vundle set noshellslash
augroup END

" Skeletons. {{{1
augroup skeleton
    autocmd!
    autocmd BufNewFile * :silent! exec ":0r " . $DOTFILES  . "/vim/templates/" . &ft
    autocmd BufNewFile * %substitute#\[:VIM_EVAL:\]\(.\{-\}\)\[:END_EVAL:\]#\=eval(submatch(1))#ge
augroup END

" Auto-chmod. {{{1
function! ConditionalChmod(line1, current_file)
    if has("unix")
        if a:line1 =~ '^#!'
            execute "silent !chmod +x " . a:current_file
        endif
    endif
endfunction

augroup auto-chmod
    autocmd!
    autocmd BufWritePost * call ConditionalChmod(getline(1), expand("%:p"))
augroup END

" Plugin settings. "{{{1
" delimitMate plugin settings. {{{2
let g:delimitMate_expand_cr = 1
let g:delimitMate_expand_space = 1
let g:SuperTabCrMapping = 0

" NERDTree plugin settings. {{{2
let g:NERDTreeBookmarksFile = $HOME . "/.vim/.NERDTreeBookmarks"
let g:NERDTreeShowBookmarks = 1
let g:NERDTreeDirArrows = 1

nnoremap <leader>n :NERDTreeFocus<cr>

" CtrlP plugin settings. {{{2
" Set the max files
let g:ctrlp_max_files = 10000

" Optimize file searching
if has("unix")
    let g:ctrlp_user_command = {
                \   'types': {
                \       1: ['.git/', 'cd %s && git ls-files --exclude-standard -co'],
                \       2: ['.hg/', 'cd %s && hg manifest']
                \   },
                \   'fallback': 'find %s -type f | head -' . g:ctrlp_max_files
                \ }
endif

if has("win32")
    let g:ctrlp_user_command = {
                \   'types': {
                \       1: ['.git/', 'cd %s && git ls-files --exclude-standard -co'],
                \       2: ['.hg/', 'cd %s && hg manifest']
                \   },
                \   'fallback': 'dir %s /-n /b /s /a-d | findstr /V "\.dropbox\.cache\\ \.git\\ \.hg\\"'
                \ }
endif

" Set CtrlP's working directory to the VCS project root, or vim's current
" directory if the current file is under it, or the directory of the current
" file, in that order.
let g:ctrlp_working_path_mode = 'ra'

" Hide hidden files when not using ctrlp_user_command.
let g:ctrlp_show_hidden = 0

" Ignore common VCS directories and various other uneditables when not using
" ctrlp_user_command.
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.dropbox\.cache$\|\.git$\|\.hg$\|\.svn$',
  \ 'file': '\.exe$\|\.so$\|\.dll$',
  \ }

nnoremap <leader>f :CtrlP<CR>
nnoremap <leader>F :CtrlPCurWD<CR>
nnoremap <leader>b :CtrlPBuffer<CR>
nnoremap <leader>m :CtrlPMixed<CR>
nnoremap <leader>M :CtrlPMRUFiles<CR>
nnoremap <leader>t :CtrlPTag<CR>
nnoremap <leader>T :CtrlPBufTag<CR>
nnoremap <leader>l :CtrlPLine<CR>
nnoremap <leader>u :CtrlPUndo<CR>
nnoremap <leader>U :CtrlPChange<CR>
nnoremap <leader>d :CtrlPDir<CR>

let g:ctrlp_extensions = ['mixed', 'tag', 'buffertag', 'line', 'undo', 'changes', 'dir']

" YankRing plugin settings. {{{2
let g:yankring_history_dir = '~/.vim'

" vim-session plugin settings. {{{2
let g:session_autosave = "yes"
let g:session_autoload = "yes"
let g:session_directory = "~/.vim/sessions"
set sessionoptions+=resize,winpos
set sessionoptions-=help

" SuperTab plugin settings. {{{2
let g:SuperTabDefaultCompletionType = "context"
if has("autocmd") && exists("+omnifunc") 
    augroup omnicomp
        autocmd!
        autocmd Filetype * if &omnifunc == "" | setlocal omnifunc=syntaxcomplete#Complete | endif
    augroup END
endif

" Language settings. {{{1
" C language settings. {{{2

" Clojure language settings. {{{2
augroup clojure
    autocmd!
    autocmd FileType clojure RainbowParenthesesActivate
    autocmd FileType clojure RainbowParenthesesLoadRound
    autocmd FileType clojure RainbowParenthesesLoadSquare
augroup END

" Coffeescript language settings. {{{2
augroup coffeescript
    autocmd!
    autocmd BufNewFile,BufReadPost *.coffee setl foldmethod=indent nofoldenable
    autocmd BufNewFile,BufReadPost *.coffee setl shiftwidth=2 expandtab
    autocmd BufWritePost *.coffee silent CoffeeMake! -b | cwindow | redraw!
augroup END

" Haskell language settings. {{{2
augroup haskell
    autocmd!
    autocmd Bufenter *.hs compiler ghc " TODO: Condition on ghc actually being installed.
augroup END
let g:haddock_browser = "google-chrome"

" HTML language settings. {{{2
let g:closetag_html_style=1

" Javascript language settings. {{{2
augroup javascript
    autocmd!
    autocmd FileType javascript setl foldenable
    autocmd FileType javascript setl nocindent
    autocmd FileType javascript call JavaScriptFold()
augroup END

let g:used_javascript_libs = 'underscore,backbone,jquery,angularjs,sugar,requirejs'
let g:syntastic_json_checkers=['jsonlint']

" LaTeX language settings. {{{2
let g:Tex_DefaultTargetFormat="pdf"
let g:Tex_MultipleCompileFormats="dvi,pdf"
let g:Tex_ViewRule_pdf="sumatrapdf -reuse-instance" " TODO: Make cross-platform.
let g:Tex_CompileRule_pdf = 'pdflatex --synctex=-1 -src-specials -interaction=nonstopmode $*'
let g:Tex_AutoFolding=0
let g:tex_flavor='latex'

" Lisp language settings. {{{2
augroup lisp
    autocmd!
    autocmd BufNewFile,BufReadPost *.cl set lisp
augroup END

" Mutt format settings. {{{2
" Set filetype to mail when editing emails for mutt.
augroup mutt
    autocmd!
    autocmd BufRead,BufNewFile *mutt-* setfiletype mail
augroup END

" OCaml language settings. {{{2
if executable("opam")
    let g:opam_share = system("opam config var share")
    let g:opam_share = substitute(g:opam_share, '[\r\n]*$', '', '')
    let g:ocp_indent_vimfile = g:opam_share . "/vim/syntax/ocp-indent.vim"

    if filereadable(g:ocp_indent_vimfile)
        augroup ocaml
            autocmd!
            autocmd FileType ocaml exec "source " . g:ocp_indent_vimfile
        augroup END
    endif

    let g:merlin_vimfile = g:opam_share . "/ocamlmerlin/vim/syntax/merlin.vim"
    if filereadable(g:merlin_vimfile)
        let g:syntastic_ocaml_checkers=['merlin']
        exec "set rtp+=" . g:opam_share . "/ocamlmerlin/vim"
        exec "set rtp+=" . g:opam_share . "/ocamlmerlin/vimbufsync"
    endif
endif

" Python language settings. {{{2
augroup python
    autocmd!
    autocmd FileType python set omnifunc=pythoncomplete#Complete
augroup END

" Ruby language settings. {{{2
augroup ruby
    autocmd!
    autocmd BufNewFile,BufRead *_spec.rb compiler rspec
    autocmd BufNewFile,BufReadPost *.rb setl foldmethod=indent nofoldenable
    autocmd BufNewFile,BufReadPost *.rb setl shiftwidth=2 expandtab
augroup END

" Machine-specific settings. {{{1
if filereadable(glob("~/.vimrc.local")) 
    source ~/.vimrc.local
endif

